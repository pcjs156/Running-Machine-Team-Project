from matplotlib import pyplot as plt
import random as rnd

real_x = "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719"
real_y = "29.578029642545772 101 101 101 29.272727272727273 31.0 37.61904761904762 29.0 37.03333333333333 30.81578947368421 37.875 23.40740740740741 36.71052631578947 28.75862068965517 23.7 31.03030303030303 23.575757575757574 26.153846153846153 32.743589743589745 31.13888888888889 37.23913043478261 33.85294117647059 28.137931034482758 16.526315789473685 29.26923076923077 21.96 29.735294117647058 29.458333333333332 27.82608695652174 19.18918918918919 21.714285714285715 22.51851851851852 22.4 27.571428571428573 22.689655172413794 33.476190476190474 27.91304347826087 29.866666666666667 27.818181818181817 20.217391304347824 24.615384615384617 33.06060606060606 24.448275862068964 25.11111111111111 30.25 30.153846153846153 40.8 19.923076923076923 23.708333333333332 26.75 31.12 22.38235294117647 22.821428571428573 24.181818181818183 27.2 26.095238095238095 20.761904761904763 26.9 25.05263157894737 20.962962962962962 24.105263157894736 33.73076923076923 19.708333333333332 30.95 32.642857142857146 30.0 20.0 24.181818181818183 24.72222222222222 17.72222222222222 18.791666666666668 22.862068965517242 18.53846153846154 28.75 18.8 22.857142857142858 20.076923076923077 21.105263157894736 23.294117647058822 26.818181818181817 15.071428571428571 18.2 17.923076923076923 39.68421052631579 25.7 20.857142857142858 25.714285714285715 24.357142857142858 31.2 21.181818181818183 17.833333333333332 33.9375 24.714285714285715 21.785714285714285 27.181818181818183 17.4 18.545454545454547 14.5 27.0 39.4 12.25 30.428571428571427 29.857142857142858 33.07142857142857 25.428571428571427 30.25 18.5 16.357142857142858 31.266666666666666 27.4 19.0 18.0 17.333333333333332 18.2 21.0 27.25 20.7 14.0 24.153846153846153 25.0 28.363636363636363 26.875 23.0 27.5 20.3 20.90909090909091 14.5 39.5 11.666666666666666 37.0 11.0 19.625 20.833333333333332 19.818181818181817 15.333333333333334 47.5 13.125 36.8 17.6 38.714285714285715 16.75 39.285714285714285 7.0 43.166666666666664 16.6 19.5 16.833333333333332 25.285714285714285 50.0 5.6 29.75 15.375 20.75 10.0 9.857142857142858 5.333333333333333 14.4 31.666666666666668 15.666666666666666 29.75 29.6 27.75 17.5 7.5 101 9.666666666666666 101 32.45454545454545 101 23.75 27.428571428571427 21.571428571428573 40.0 34.0 39.25 11.5 1.0 29.0 72.5 101 10.0 14.5 24.833333333333332 43.666666666666664 21.333333333333332 31.0 101 101 31.0 1.0 31.666666666666668 26.0 21.0 10.0 48.5 101 16.5 101 25.285714285714285 101 23.6 16.0 16.0 101 101 16.0 1.0 10.0 27.75 101 12.0 12.75 18.0 30.0 32.25 101 3.0 101 11.666666666666666 91.0 15.0 101 32.0 101 15.5 22.0 7.5 101 7.0 101 19.333333333333332 29.0 101 13.5 10.0 12.0 101 6.0 21.0 5.5 43.0 30.5 17.5 101 101 12.0 6.0 101 101 101 43.0 101 101 94.0 101 19.0 7.0 101 8.5 17.0 2.0 37.0 101 101 2.0 10.0 101 101 101 16.0 101 15.0 3.5 101 101 24.0 101 101 101 2.0 3.0 101 101 101 101 101 15.333333333333334 101 101 101 8.0 49.0 101 5.0 31.0 101 101 101 101 101 101 8.0 101 99.0 101 101 101 101 12.0 101 101 101 101 101 101 101 101 101 101 5.0 101 45.0 101 101 101 101 3.0 101 101 101 101 101 101 24.5 101 101 3.0 101 101 101 12.0 101 101 101 31.0 101 101 101 101 39.0 101 17.0 101 101 101 101 101 101 30.0 101 6.0 101 101 101 101 12.0 101 101 101 101 101 7.0 101 2.0 101 5.0 101 101 101 101 101 101 27.0 101 101 101 101 101 101 24.0 101 101 101 101 46.0 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 9.0 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 23.0 101 101 101 101 101 101 101 101 101 101 101 101 37.0 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 94.0 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 37.0 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 15.0 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 44.0 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 22.0 101 101 101 101 101 101 101 101 101 101 101 101 48.0"
real_x = real_x.split()
real_y = real_y.split()

real_x = [int(x) for x in real_x]
# real_y = [float(x) for x in real_y]
for i in range(len(real_y)):
    real_y[i] = float(real_y[i])
    if real_y[i] >= 80.0:
        real_y[i] = 101.0

ema = 0
ema_y = []
alpha = 0.1
for i in range(len(real_y)):
    x = real_y[i]
    if real_y[i] != 101:
        if i == 0:
            ema = x
        else:
            ema = alpha * x + 0.9 * ema
        ema_y.append(x)
        continue    
    if real_y[i] == 101:
        x = real_y[i - 1]
        ema = alpha * x + 0.9 * ema
        ema_y.append(ema)

plt.scatter(real_x, ema_y)
plt.savefig('emaImputation.png')